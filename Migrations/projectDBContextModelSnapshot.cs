// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication3.Context;

#nullable disable

namespace WebApplication3.Migrations
{
    [DbContext(typeof(projectDBContext))]
    partial class projectDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication3.Models.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("ImageList")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Louis",
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9701),
                            Description = "Hello, My Name Is Ice Cream: The Art and Science of the Scoop: A Cookbook",
                            Name = "Hello, My Name Is Ice Cream: The Art and Science of the Scoop: A Cookbook",
                            Price = 500000.0,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9727),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Author = "Hoang Cong Chien",
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9741),
                            Description = "Big Gay Ice Cream: Saucy Stories & Frozen Treats: Going All the Way with Ice Cream: A Cookbook",
                            Name = "Big Gay Ice Cream: Saucy Stories & Frozen Treats: Going All the Way with Ice Cream: A Cookbook",
                            Price = 700000.0,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9742),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 3,
                            Author = "Nguyen Thi Hue",
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9747),
                            Description = "Gelupo Gelato: A delectable palette of ice cream recipes ",
                            Name = "Gelupo Gelato: A delectable palette of ice cream recipes",
                            Price = 1000000.0,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9749),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 4,
                            Author = "Louis",
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9914),
                            Description = "Salt & Straw Ice Cream Cookbook",
                            Name = "Salt & Straw Ice Cream Cookbook",
                            Price = 800000.0,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9917),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 5,
                            Author = "Louis",
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9924),
                            Description = "Food52 Ice Cream and Friends: 60 Recipes and Riffs",
                            Name = "Food52 Ice Cream and Friends: 60 Recipes and Riffs",
                            Price = 300000.0,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 917, DateTimeKind.Local).AddTicks(9926),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        });
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Budget", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 1000000000000.0,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<byte?>("Star")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("FeedBack", (string)null);
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Flavour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("ImageList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Flavour", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8980),
                            Description = "Vanilla",
                            Name = "Vanilla",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8982),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8990),
                            Description = "Chocolate",
                            Name = "Chocolate",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8991),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8996),
                            Description = "Chocolate chip",
                            Name = "Chocolate chip",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8997),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9012),
                            Description = "Strawberry",
                            Name = "Strawberry",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9014),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9020),
                            Description = "Mango",
                            Name = "Mango",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9028),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9062),
                            Description = "Coffee",
                            Name = "Coffee",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9064),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9069),
                            Description = "Black currant",
                            Name = "Black currant",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9071),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9075),
                            Description = "Cherry",
                            Name = "Cherry",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9077),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9082),
                            Description = "Butterscotch",
                            Name = "Butterscotch",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9084),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9093),
                            Description = "Walnut",
                            Name = "Walnut",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9095),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9438),
                            Description = "Vanilla and strawberry (two in one)",
                            Name = "Vanilla and strawberry (two in one)",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9441),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9447),
                            Description = "Pistachio",
                            Name = "Pistachio",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9449),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9454),
                            Description = "Banana",
                            Name = "Banana",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9456),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9460),
                            Description = "Banana Chocolate chip",
                            Name = "Banana Chocolate chip",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9462),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9467),
                            Description = "Chocolate almond",
                            Name = "Chocolate almond",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9469),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9473),
                            Description = "Chocolate truffle",
                            Name = "Chocolate truffle",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9475),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9480),
                            Description = "Kiwi fruit",
                            Name = "Kiwi fruit",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9482),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9493),
                            Description = "Pineapple",
                            Name = "Pineapple",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9496),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9500),
                            Description = "Fruit and nut",
                            Name = "Fruit and nut",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9502),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9507),
                            Description = "Cashew Caramel crunch",
                            Name = "Cashew Caramel crunch",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9509),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        });
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("OrgFileName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("ntext");

                    b.Property<byte>("PayingOption")
                        .HasColumnType("tinyint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<byte?>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("ImageList")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("ntext");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<byte>("PayingOption")
                        .HasColumnType("tinyint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<byte?>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("OrderHistory", (string)null);
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.OrderHistoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("ImageList")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<int>("OrderHistoryId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderHistoryId");

                    b.ToTable("OrderHistoryDetail", (string)null);
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("AccessType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("ImageList")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Recipe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessType = (byte)0,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8878),
                            Description = "Classic Custard Ice Cream Base",
                            Name = "Classic Custard Ice Cream Base",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8904),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccessType = (byte)0,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8927),
                            Description = "Simple Vanila Ice Cream",
                            Name = "Simple Vanila Ice Cream",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8928),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 3,
                            AccessType = (byte)1,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8934),
                            Description = "Cookie Monster Ice Cream",
                            Name = "Cookie Monster Ice Cream",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8937),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 4,
                            AccessType = (byte)1,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8943),
                            Description = "Salted Caramel Ice Cream",
                            Name = "Salted Caramel Ice Cream",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8945),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 5,
                            AccessType = (byte)1,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8952),
                            Description = "Strawberry Shortcake Ice Cream",
                            Name = "Strawberry Shortcake Ice Cream",
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(8954),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        });
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.RecipeFlavour", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("FlavourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.Property<string>("unit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar");

                    b.HasKey("RecipeId", "FlavourId");

                    b.HasIndex("FlavourId");

                    b.ToTable("RecipeFlavour");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("UserAccount", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9521),
                            Description = "Hello, I'm Louis Handsome",
                            Email = "duclongdo1997@gmail.com",
                            Name = "Louis",
                            Password = "25031997",
                            PhoneNumber = "0375326233",
                            Type = (byte)1,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9522),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9531),
                            Description = "TPM Hoang Cong Chien",
                            Email = "prolagicoanduockhong@gmail.com",
                            Name = "Hoang Cong Chien",
                            Password = "1",
                            PhoneNumber = "1111111111",
                            Type = (byte)1,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9533),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9538),
                            Description = "Hue xinh gai",
                            Email = "huenguyenthi@gmail.com",
                            Name = "Nguyen Thi Hue",
                            Password = "25031997",
                            PhoneNumber = "2222222222",
                            Type = (byte)1,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9539),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9544),
                            Description = "Thao Muoi xinh gai dang yeu",
                            Email = "thuthaopham1998@gmail.com",
                            Name = "Thao Muoi",
                            Password = "14081998",
                            PhoneNumber = "0365619881",
                            Type = (byte)2,
                            UpdatedAt = new DateTime(2023, 7, 16, 20, 59, 19, 919, DateTimeKind.Local).AddTicks(9546),
                            UserCreatedId = 1,
                            UserModifyId = 1
                        });
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Budget", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.UserAccount", "UserAccount")
                        .WithOne()
                        .HasForeignKey("WebApplication3.Models.Entity.Budget", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.FeedBack", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.UserAccount", "UserAccount")
                        .WithMany("FeedBacks")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Order", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.UserAccount", "UserAccount")
                        .WithMany("Orders")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.OrderDetail", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.OrderHistory", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.UserAccount", "UserAccount")
                        .WithMany("OrderHistorys")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.OrderHistoryDetail", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.OrderHistory", "OrderHistory")
                        .WithMany("OrderHistoryDetails")
                        .HasForeignKey("OrderHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHistory");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.RecipeFlavour", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.Flavour", "Flavour")
                        .WithMany()
                        .HasForeignKey("FlavourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication3.Models.Entity.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flavour");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.UserAccount", b =>
                {
                    b.HasOne("WebApplication3.Models.Entity.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.OrderHistory", b =>
                {
                    b.Navigation("OrderHistoryDetails");
                });

            modelBuilder.Entity("WebApplication3.Models.Entity.UserAccount", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("OrderHistorys");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
